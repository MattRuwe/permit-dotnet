//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace PermitSDK.OpenAPI
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PermitClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Login
        /// </summary>
        /// <param name="invite_code">An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.</param>
        /// <returns>Logged in successfully (stored session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual LoginResult Login(System.Guid? invite_code = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await LoginAsync(invite_code, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Login
        /// </summary>
        /// <param name="invite_code">An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.</param>
        /// <returns>Logged in successfully (stored session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoginResult> LoginAsync(System.Guid? invite_code = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/auth/login?");
            if (invite_code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invite_code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invite_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoginResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("Log in failed (no cookie stored).", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Logout
        /// </summary>
        /// <returns>Logged out (deleted session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Logout()
        {
            System.Threading.Tasks.Task.Run(async () => await LogoutAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Logout
        /// </summary>
        /// <returns>Logged out (deleted session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task LogoutAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/auth/logout");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Switch Organization
        /// </summary>
        /// <param name="org_id">the organization id the user wishes to switch to as the active org on the session</param>
        /// <returns>Switched org successfully (stored session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual LoginResult Switch_organization(System.Guid org_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Switch_organizationAsync(org_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Switch Organization
        /// </summary>
        /// <param name="org_id">the organization id the user wishes to switch to as the active org on the session</param>
        /// <returns>Switched org successfully (stored session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoginResult> Switch_organizationAsync(System.Guid org_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/auth/switch_org/{org_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoginResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("Authentication Failed (not logged in)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("Cannot switch to requested org (no permissions or no such org)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// (DEV MODE) Login
        /// </summary>
        /// <returns>Logged in successfully (stored session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Dev_login(DevLogin body)
        {
            System.Threading.Tasks.Task.Run(async () => await Dev_loginAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// (DEV MODE) Login
        /// </summary>
        /// <returns>Logged in successfully (stored session cookie).</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Dev_loginAsync(DevLogin body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/auth/devlogin");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Me
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ViewerContext Me()
        {
            return System.Threading.Tasks.Task.Run(async () => await MeAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Me
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ViewerContext> MeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/auth/me");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ViewerContext>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Opal Data Sources
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual DataSourceConfig Get_opal_data_sources()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_opal_data_sourcesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Opal Data Sources
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DataSourceConfig> Get_opal_data_sourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/opal/data/config");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataSourceConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual FullData Get_all_data(System.Guid org_id, System.Guid proj_id, System.Guid env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_dataAsync(org_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FullData> Get_all_dataAsync(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FullData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Data For User
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserData Get_data_for_user(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Guid user_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_data_for_userAsync(org_id, proj_id, env_id, user_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Data For User
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserData> Get_data_for_userAsync(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Guid user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Data For Role
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleData Get_data_for_role(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Guid role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_data_for_roleAsync(org_id, proj_id, env_id, role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Data For Role
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleData> Get_data_for_roleAsync(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Guid role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Data For Set Rule
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Get_data_for_set_rule(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Guid user_set_id, System.Guid resource_set_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_data_for_set_ruleAsync(org_id, proj_id, env_id, user_set_id, resource_set_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Data For Set Rule
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>> Get_data_for_set_ruleAsync(System.Guid org_id, System.Guid proj_id, System.Guid env_id, System.Guid user_set_id, System.Guid resource_set_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_set_id == null)
                throw new System.ArgumentNullException("user_set_id");

            if (resource_set_id == null)
                throw new System.ArgumentNullException("resource_set_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_set_id}", System.Uri.EscapeDataString(ConvertToString(user_set_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_set_id}", System.Uri.EscapeDataString(ConvertToString(resource_set_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the authenticated account member
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberRead Get_authenticated_member()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_authenticated_memberAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the authenticated account member
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberRead> Get_authenticated_memberAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/members/me");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Organization Members
        /// </summary>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<OrgMemberRead> List_organization_members(int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_organization_membersAsync(page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Organization Members
        /// </summary>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrgMemberRead>> List_organization_membersAsync(int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/members?");
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrgMemberRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Organization Member
        /// </summary>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberRead Get_organization_member(string member_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_organization_memberAsync(member_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Organization Member
        /// </summary>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberRead> Get_organization_memberAsync(string member_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/members/{member_id}");
            urlBuilder_.Replace("{member_id}", System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Organization Member
        /// </summary>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_organization_member(string member_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_organization_memberAsync(member_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Organization Member
        /// </summary>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_organization_memberAsync(string member_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/members/{member_id}");
            urlBuilder_.Replace("{member_id}", System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Organization Member
        /// </summary>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberRead Update_organization_member(string member_id, OrgMemberUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_organization_memberAsync(member_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Organization Member
        /// </summary>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberRead> Update_organization_memberAsync(string member_id, OrgMemberUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/members/{member_id}");
            urlBuilder_.Replace("{member_id}", System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Environment Api Key
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyRead Get_environment_api_key(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_environment_api_keyAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Environment Api Key
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyRead> Get_environment_api_keyAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/api-key/{proj_id}/{env_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Api Key Scope
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyScopeRead Get_api_key_scope()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_api_key_scopeAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Api Key Scope
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyScopeRead> Get_api_key_scopeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/api-key/scope");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyScopeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Organizations
        /// </summary>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<OrganizationRead> List_organizations(int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_organizationsAsync(page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Organizations
        /// </summary>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRead>> List_organizationsAsync(int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs?");
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Organization
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationRead Create_organization(OrganizationCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_organizationAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Organization
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRead> Create_organizationAsync(OrganizationCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationRead Get_organization(string org_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_organizationAsync(org_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRead> Get_organizationAsync(string org_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs/{org_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_organization(string org_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_organizationAsync(org_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_organizationAsync(string org_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs/{org_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationRead Update_organization(string org_id, OrganizationUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_organizationAsync(org_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRead> Update_organizationAsync(string org_id, OrganizationUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs/{org_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Organization Invites
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<InviteRead> List_organization_invites(string org_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_organization_invitesAsync(org_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Organization Invites
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InviteRead>> List_organization_invitesAsync(string org_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs/{org_id}/invites?");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InviteRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Invite Members To Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual MultiInviteResult Invite_members_to_organization(string org_id, System.Collections.Generic.IEnumerable<InviteCreate> body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Invite_members_to_organizationAsync(org_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invite Members To Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MultiInviteResult> Invite_members_to_organizationAsync(string org_id, System.Collections.Generic.IEnumerable<InviteCreate> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs/{org_id}/invites");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultiInviteResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Invite
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="invite_id">Id of the invite to cancel</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Cancel_invite(string org_id, System.Guid invite_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Cancel_inviteAsync(org_id, invite_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Invite
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="invite_id">Id of the invite to cancel</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Cancel_inviteAsync(string org_id, System.Guid invite_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (invite_id == null)
                throw new System.ArgumentNullException("invite_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/orgs/{org_id}/invites/{invite_id}");
            urlBuilder_.Replace("{org_id}", System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{invite_id}", System.Uri.EscapeDataString(ConvertToString(invite_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Projects
        /// </summary>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ProjectRead> List_projects(int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_projectsAsync(page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Projects
        /// </summary>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRead>> List_projectsAsync(int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects?");
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Project
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Create_project(ProjectCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_projectAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Project
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Create_projectAsync(ProjectCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Project
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Get_project(string proj_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_projectAsync(proj_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Project
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Get_projectAsync(string proj_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_project(string proj_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_projectAsync(proj_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Project
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_projectAsync(string proj_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Project
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Update_project(string proj_id, ProjectUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_projectAsync(proj_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Project
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Update_projectAsync(string proj_id, ProjectUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Environments
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<EnvironmentRead> List_environments(string proj_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_environmentsAsync(proj_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Environments
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnvironmentRead>> List_environmentsAsync(string proj_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}/envs?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EnvironmentRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentRead Create_environment(string proj_id, EnvironmentCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_environmentAsync(proj_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentRead> Create_environmentAsync(string proj_id, EnvironmentCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}/envs");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentRead Get_environment(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_environmentAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentRead> Get_environmentAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}/envs/{env_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_environment(string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_environmentAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_environmentAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}/envs/{env_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentRead Update_environment(string proj_id, string env_id, EnvironmentUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_environmentAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Environment
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentRead> Update_environmentAsync(string proj_id, string env_id, EnvironmentUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/projects/{proj_id}/envs/{env_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resources
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="include_built_in">Whether to include or exclude built-in resources, default is False</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceRead> List_resources(string proj_id, string env_id, bool? include_built_in = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resourcesAsync(proj_id, env_id, include_built_in, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resources
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="include_built_in">Whether to include or exclude built-in resources, default is False</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRead>> List_resourcesAsync(string proj_id, string env_id, bool? include_built_in = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include_built_in != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include_built_in") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_built_in, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Create_resource(string proj_id, string env_id, ResourceCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resourceAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Create_resourceAsync(string proj_id, string env_id, ResourceCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Get_resource(string proj_id, string env_id, string resource_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resourceAsync(proj_id, env_id, resource_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Get_resourceAsync(string proj_id, string env_id, string resource_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Replace_resource(string proj_id, string env_id, string resource_id, ResourceReplace body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Replace_resourceAsync(proj_id, env_id, resource_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Replace_resourceAsync(string proj_id, string env_id, string resource_id, ResourceReplace body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource(string proj_id, string env_id, string resource_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resourceAsync(proj_id, env_id, resource_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resourceAsync(string proj_id, string env_id, string resource_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Update_resource(string proj_id, string env_id, string resource_id, ResourceUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resourceAsync(proj_id, env_id, resource_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Update_resourceAsync(string proj_id, string env_id, string resource_id, ResourceUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Actions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceActionRead> List_resource_actions(string proj_id, string env_id, string resource_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_actionsAsync(proj_id, env_id, resource_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Actions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceActionRead>> List_resource_actionsAsync(string proj_id, string env_id, string resource_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceActionRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionRead Create_resource_action(string proj_id, string env_id, string resource_id, ResourceActionCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_actionAsync(proj_id, env_id, resource_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionRead> Create_resource_actionAsync(string proj_id, string env_id, string resource_id, ResourceActionCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionRead Get_resource_action(string proj_id, string env_id, string resource_id, string action_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_actionAsync(proj_id, env_id, resource_id, action_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionRead> Get_resource_actionAsync(string proj_id, string env_id, string resource_id, string action_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_id == null)
                throw new System.ArgumentNullException("action_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{action_id}", System.Uri.EscapeDataString(ConvertToString(action_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_action(string proj_id, string env_id, string resource_id, string action_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_actionAsync(proj_id, env_id, resource_id, action_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_actionAsync(string proj_id, string env_id, string resource_id, string action_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_id == null)
                throw new System.ArgumentNullException("action_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{action_id}", System.Uri.EscapeDataString(ConvertToString(action_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionRead Update_resource_action(string proj_id, string env_id, string resource_id, string action_id, ResourceActionUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_actionAsync(proj_id, env_id, resource_id, action_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Action
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionRead> Update_resource_actionAsync(string proj_id, string env_id, string resource_id, string action_id, ResourceActionUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_id == null)
                throw new System.ArgumentNullException("action_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{action_id}", System.Uri.EscapeDataString(ConvertToString(action_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Roles
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceRoleRead> List_resource_roles(string proj_id, string env_id, string resource_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_rolesAsync(proj_id, env_id, resource_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Roles
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRoleRead>> List_resource_rolesAsync(string proj_id, string env_id, string resource_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceRoleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Create_resource_role(string proj_id, string env_id, string resource_id, ResourceRoleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_roleAsync(proj_id, env_id, resource_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Create_resource_roleAsync(string proj_id, string env_id, string resource_id, ResourceRoleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Get_resource_role(string proj_id, string env_id, string resource_id, string role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_roleAsync(proj_id, env_id, resource_id, role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Get_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_role(string proj_id, string env_id, string resource_id, string role_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_roleAsync(proj_id, env_id, resource_id, role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Update_resource_role(string proj_id, string env_id, string resource_id, string role_id, ResourceRoleUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_roleAsync(proj_id, env_id, resource_id, role_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Update_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, ResourceRoleUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Permissions to Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Assign_permissions_to_resource_role(string proj_id, string env_id, string resource_id, string role_id, AddRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_permissions_to_resource_roleAsync(proj_id, env_id, resource_id, role_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Permissions to Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Assign_permissions_to_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, AddRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Permissions from Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Remove_permissions_from_resource_role(string proj_id, string env_id, string resource_id, string role_id, RemoveRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Remove_permissions_from_resource_roleAsync(proj_id, env_id, resource_id, role_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Permissions from Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Remove_permissions_from_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, RemoveRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Add_parent_resource_role(string proj_id, string env_id, string resource_id, string role_id, string parent_role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Add_parent_resource_roleAsync(proj_id, env_id, resource_id, role_id, parent_role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Add_parent_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, string parent_role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (parent_role_id == null)
                throw new System.ArgumentNullException("parent_role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/parents/{parent_role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{parent_role_id}", System.Uri.EscapeDataString(ConvertToString(parent_role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Remove_parent_resource_role(string proj_id, string env_id, string resource_id, string role_id, string parent_role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Remove_parent_resource_roleAsync(proj_id, env_id, resource_id, role_id, parent_role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Remove_parent_resource_roleAsync(string proj_id, string env_id, string resource_id, string role_id, string parent_role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (parent_role_id == null)
                throw new System.ArgumentNullException("parent_role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/parents/{parent_role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{parent_role_id}", System.Uri.EscapeDataString(ConvertToString(parent_role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Attributes
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceAttributeRead> List_resource_attributes(string proj_id, string env_id, string resource_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_attributesAsync(proj_id, env_id, resource_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Attributes
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceAttributeRead>> List_resource_attributesAsync(string proj_id, string env_id, string resource_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceAttributeRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Create_resource_attribute(string proj_id, string env_id, string resource_id, ResourceAttributeCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_attributeAsync(proj_id, env_id, resource_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Create_resource_attributeAsync(string proj_id, string env_id, string resource_id, ResourceAttributeCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Get_resource_attribute(string proj_id, string env_id, string resource_id, string attribute_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_attributeAsync(proj_id, env_id, resource_id, attribute_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Get_resource_attributeAsync(string proj_id, string env_id, string resource_id, string attribute_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attribute_id}", System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_attribute(string proj_id, string env_id, string resource_id, string attribute_id, int? page = null, int? per_page = null)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_attributeAsync(proj_id, env_id, resource_id, attribute_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_attributeAsync(string proj_id, string env_id, string resource_id, string attribute_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attribute_id}", System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Update_resource_attribute(string proj_id, string env_id, string resource_id, string attribute_id, ResourceAttributeUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_attributeAsync(proj_id, env_id, resource_id, attribute_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Attribute
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Update_resource_attributeAsync(string proj_id, string env_id, string resource_id, string attribute_id, ResourceAttributeUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resource_id}", System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attribute_id}", System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Roles
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<RoleRead> List_roles(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_rolesAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Roles
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRead>> List_rolesAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Create_role(string proj_id, string env_id, RoleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Create_roleAsync(string proj_id, string env_id, RoleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Get_role(string proj_id, string env_id, string role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_roleAsync(proj_id, env_id, role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Get_roleAsync(string proj_id, string env_id, string role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_role(string proj_id, string env_id, string role_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_roleAsync(proj_id, env_id, role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_roleAsync(string proj_id, string env_id, string role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Update_role(string proj_id, string env_id, string role_id, RoleUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_roleAsync(proj_id, env_id, role_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Update_roleAsync(string proj_id, string env_id, string role_id, RoleUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Permissions To Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Assign_permissions_to_role(string proj_id, string env_id, string role_id, AddRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_permissions_to_roleAsync(proj_id, env_id, role_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Permissions To Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Assign_permissions_to_roleAsync(string proj_id, string env_id, string role_id, AddRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Permissions From Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Remove_permissions_from_role(string proj_id, string env_id, string role_id, RemoveRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Remove_permissions_from_roleAsync(proj_id, env_id, role_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Permissions From Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Remove_permissions_from_roleAsync(string proj_id, string env_id, string role_id, RemoveRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Add_parent_role(string proj_id, string env_id, string role_id, string parent_role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Add_parent_roleAsync(proj_id, env_id, role_id, parent_role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Add_parent_roleAsync(string proj_id, string env_id, string role_id, string parent_role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (parent_role_id == null)
                throw new System.ArgumentNullException("parent_role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{parent_role_id}", System.Uri.EscapeDataString(ConvertToString(parent_role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Remove_parent_role(string proj_id, string env_id, string role_id, string parent_role_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Remove_parent_roleAsync(proj_id, env_id, role_id, parent_role_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Parent Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="parent_role_id">Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Remove_parent_roleAsync(string proj_id, string env_id, string role_id, string parent_role_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (parent_role_id == null)
                throw new System.ArgumentNullException("parent_role_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{role_id}", System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{parent_role_id}", System.Uri.EscapeDataString(ConvertToString(parent_role_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Condition Sets
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="type">if provided, will return only the condition sets of the specified type. e.g: only user sets.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRead> List_condition_sets(string proj_id, string env_id, ConditionSetType? type = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_condition_setsAsync(proj_id, env_id, type, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Condition Sets
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="type">if provided, will return only the condition sets of the specified type. e.g: only user sets.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRead>> List_condition_setsAsync(string proj_id, string env_id, ConditionSetType? type = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/condition_sets?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ConditionSetRead Create_condition_set(string proj_id, string env_id, ConditionSetCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_condition_setAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConditionSetRead> Create_condition_setAsync(string proj_id, string env_id, ConditionSetCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/condition_sets");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConditionSetRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ConditionSetRead Get_condition_set(string proj_id, string env_id, string condition_set_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_condition_setAsync(proj_id, env_id, condition_set_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConditionSetRead> Get_condition_setAsync(string proj_id, string env_id, string condition_set_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{condition_set_id}", System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConditionSetRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_condition_set(string proj_id, string env_id, string condition_set_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_condition_setAsync(proj_id, env_id, condition_set_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_condition_setAsync(string proj_id, string env_id, string condition_set_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{condition_set_id}", System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ConditionSetRead Update_condition_set(string proj_id, string env_id, string condition_set_id, ConditionSetUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_condition_setAsync(proj_id, env_id, condition_set_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Condition Set
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConditionSetRead> Update_condition_setAsync(string proj_id, string env_id, string condition_set_id, ConditionSetUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{condition_set_id}", System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConditionSetRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_UserRead_ List_users(string proj_id, string env_id, string? search = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_usersAsync(proj_id, env_id, search, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_UserRead_> List_usersAsync(string proj_id, string env_id, string? search = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (search != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_UserRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Create_user(string proj_id, string env_id, UserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_userAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Create_userAsync(string proj_id, string env_id, UserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Get_user(string proj_id, string env_id, string user_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_userAsync(proj_id, env_id, user_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Get_userAsync(string proj_id, string env_id, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users/{user_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Replace_user(string proj_id, string env_id, string user_id, UserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Replace_userAsync(proj_id, env_id, user_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Replace_userAsync(string proj_id, string env_id, string user_id, UserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users/{user_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_user(string proj_id, string env_id, string user_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_userAsync(proj_id, env_id, user_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_userAsync(string proj_id, string env_id, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users/{user_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Update_user(string proj_id, string env_id, string user_id, UserUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_userAsync(proj_id, env_id, user_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Update_userAsync(string proj_id, string env_id, string user_id, UserUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users/{user_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Role To User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleAssignmentRead Assign_role_to_user(string proj_id, string env_id, string user_id, UserRoleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_role_to_userAsync(proj_id, env_id, user_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Role To User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleAssignmentRead> Assign_role_to_userAsync(string proj_id, string env_id, string user_id, UserRoleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign Role From User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Unassign_role_from_user(string proj_id, string env_id, string user_id, UserRoleRemove body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Unassign_role_from_userAsync(proj_id, env_id, user_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign Role From User
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Unassign_role_from_userAsync(string proj_id, string env_id, string user_id, UserRoleRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null && request_.Method != new System.Net.Http.HttpMethod("DELETE"))
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Tenant Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_UserRead_ List_tenant_users(string proj_id, string tenant_id, string env_id, string? search = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_tenant_usersAsync(proj_id, tenant_id, env_id, search, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Tenant Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_UserRead_> List_tenant_usersAsync(string proj_id, string tenant_id, string env_id, string? search = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tenant_id}", System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (search != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_UserRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Tenants
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<TenantRead> List_tenants(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_tenantsAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Tenants
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TenantRead>> List_tenantsAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/tenants?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TenantRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantRead Create_tenant(string proj_id, string env_id, TenantCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_tenantAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantRead> Create_tenantAsync(string proj_id, string env_id, TenantCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/tenants");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantRead Get_tenant(string proj_id, string env_id, string tenant_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_tenantAsync(proj_id, env_id, tenant_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantRead> Get_tenantAsync(string proj_id, string env_id, string tenant_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tenant_id}", System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_tenant(string proj_id, string env_id, string tenant_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_tenantAsync(proj_id, env_id, tenant_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_tenantAsync(string proj_id, string env_id, string tenant_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tenant_id}", System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantRead Update_tenant(string proj_id, string env_id, string tenant_id, TenantUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_tenantAsync(proj_id, env_id, tenant_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Tenant
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantRead> Update_tenantAsync(string proj_id, string env_id, string tenant_id, TenantUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tenant_id}", System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Role Assignments
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user">optional user filter, will only return role assignments granted to this user.</param>
        /// <param name="role">optional role filter, will only return role assignments granting this role.</param>
        /// <param name="tenant">optional tenant filter, will only return role assignments granted in that tenant.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<RoleAssignmentRead> List_role_assignments(string proj_id, string env_id, string? user = null, string? role = null, string? tenant = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_role_assignmentsAsync(proj_id, env_id, user, role, tenant, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Role Assignments
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user">optional user filter, will only return role assignments granted to this user.</param>
        /// <param name="role">optional role filter, will only return role assignments granting this role.</param>
        /// <param name="tenant">optional tenant filter, will only return role assignments granted in that tenant.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleAssignmentRead>> List_role_assignmentsAsync(string proj_id, string env_id, string? user = null, string? role = null, string? tenant = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/role_assignments?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (user != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (role != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("role") + "=").Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleAssignmentRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleAssignmentRead Assign_role(string proj_id, string env_id, RoleAssignmentCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleAssignmentRead> Assign_roleAsync(string proj_id, string env_id, RoleAssignmentCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/role_assignments");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Unassign_role(string proj_id, string env_id, RoleAssignmentRemove body)
        {
            System.Threading.Tasks.Task.Run(async () => await Unassign_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Unassign_roleAsync(string proj_id, string env_id, RoleAssignmentRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/role_assignments");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Set Permissions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_set">optional user set filter, will only return rules where the permission is granted to this user set</param>
        /// <param name="permission">optional permission filter, will only return condition set rules granting this permission</param>
        /// <param name="resource_set">optional resource set filter, will only return rules where the permission is granted on this resource set</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRuleRead> List_set_permissions(string proj_id, string env_id, string? user_set = null, string? permission = null, string? resource_set = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_set_permissionsAsync(proj_id, env_id, user_set, permission, resource_set, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Set Permissions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_set">optional user set filter, will only return rules where the permission is granted to this user set</param>
        /// <param name="permission">optional permission filter, will only return condition set rules granting this permission</param>
        /// <param name="resource_set">optional resource set filter, will only return rules where the permission is granted on this resource set</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRuleRead>> List_set_permissionsAsync(string proj_id, string env_id, string? user_set = null, string? permission = null, string? resource_set = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/set_rules?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (user_set != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user_set") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_set, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (permission != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("permission") + "=").Append(System.Uri.EscapeDataString(ConvertToString(permission, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resource_set != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resource_set") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resource_set, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRuleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Set Permissions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRuleRead> Assign_set_permissions(string proj_id, string env_id, ConditionSetRuleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_set_permissionsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Set Permissions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRuleRead>> Assign_set_permissionsAsync(string proj_id, string env_id, ConditionSetRuleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/set_rules");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRuleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign Set Permissions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Unassign_set_permissions(string proj_id, string env_id, ConditionSetRuleRemove body)
        {
            System.Threading.Tasks.Task.Run(async () => await Unassign_set_permissionsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign Set Permissions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Unassign_set_permissionsAsync(string proj_id, string env_id, ConditionSetRuleRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/set_rules");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Instances
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceInstanceRead> List_resource_instances(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_instancesAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Instances
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceInstanceRead>> List_resource_instancesAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/resource_instances?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceInstanceRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceRead Create_resource_instance(string proj_id, string env_id, ResourceInstanceCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_instanceAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceRead> Create_resource_instanceAsync(string proj_id, string env_id, ResourceInstanceCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/resource_instances");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceRead Get_resource_instance(string proj_id, string env_id, string instance_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_instanceAsync(proj_id, env_id, instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceRead> Get_resource_instanceAsync(string proj_id, string env_id, string instance_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (instance_id == null)
                throw new System.ArgumentNullException("instance_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instance_id}", System.Uri.EscapeDataString(ConvertToString(instance_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_instance(string proj_id, string env_id, string instance_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_instanceAsync(proj_id, env_id, instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_instanceAsync(string proj_id, string env_id, string instance_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (instance_id == null)
                throw new System.ArgumentNullException("instance_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instance_id}", System.Uri.EscapeDataString(ConvertToString(instance_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceRead Update_resource_instance(string proj_id, string env_id, string instance_id, ResourceInstanceUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_instanceAsync(proj_id, env_id, instance_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Instance
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceRead> Update_resource_instanceAsync(string proj_id, string env_id, string instance_id, ResourceInstanceUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (instance_id == null)
                throw new System.ArgumentNullException("instance_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instance_id}", System.Uri.EscapeDataString(ConvertToString(instance_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Language Instructions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<LanguageInstructions> List_language_instructions(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_language_instructionsAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Language Instructions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LanguageInstructions>> List_language_instructionsAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/{proj_id}/{env_id}/get_instructions");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LanguageInstructions>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get connected PDP configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RemoteConfig Get_authenticating_pdp_config_values()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_authenticating_pdp_config_valuesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get connected PDP configuration
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RemoteConfig> Get_authenticating_pdp_config_valuesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/pdps/me/config");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RemoteConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List PDP configurations
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<PDPConfigRead> List_pdp_configs(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_pdp_configsAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List PDP configurations
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PDPConfigRead>> List_pdp_configsAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/pdps/{proj_id}/{env_id}/configs?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PDPConfigRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get PDP configuration
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RemoteConfig Get_pdp_config_values(string proj_id, string env_id, System.Guid pdp_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_pdp_config_valuesAsync(proj_id, env_id, pdp_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get PDP configuration
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RemoteConfig> Get_pdp_config_valuesAsync(string proj_id, string env_id, System.Guid pdp_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{pdp_id}", System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RemoteConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Rotate PDP API Key
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PDPConfigRead Rotate_pdp_api_key(string proj_id, string env_id, System.Guid pdp_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Rotate_pdp_api_keyAsync(proj_id, env_id, pdp_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rotate PDP API Key
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PDPConfigRead> Rotate_pdp_api_keyAsync(string proj_id, string env_id, System.Guid pdp_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{pdp_id}", System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PDPConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List PDP Decisions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <param name="users">List of user IDs to filter by</param>
        /// <param name="approved">Filter by approved decisions</param>
        /// <param name="resources">Filter by resources</param>
        /// <param name="timestamp_from">Filter by timestamp from</param>
        /// <param name="timestamp_to">Filter by timestamp to</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_OPADecisionLog_ List_pdp_decision_logs(string proj_id, string env_id, System.Guid pdp_id, System.Collections.Generic.IEnumerable<string>? users = null, bool? approved = null, System.Collections.Generic.IEnumerable<string>? resources = null, int? timestamp_from = null, int? timestamp_to = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_pdp_decision_logsAsync(proj_id, env_id, pdp_id, users, approved, resources, timestamp_from, timestamp_to, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List PDP Decisions
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <param name="users">List of user IDs to filter by</param>
        /// <param name="approved">Filter by approved decisions</param>
        /// <param name="resources">Filter by resources</param>
        /// <param name="timestamp_from">Filter by timestamp from</param>
        /// <param name="timestamp_to">Filter by timestamp to</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_OPADecisionLog_> List_pdp_decision_logsAsync(string proj_id, string env_id, System.Guid pdp_id, System.Collections.Generic.IEnumerable<string>? users = null, bool? approved = null, System.Collections.Generic.IEnumerable<string>? resources = null, int? timestamp_from = null, int? timestamp_to = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/pdps/{proj_id}/{env_id}/decision-logs/{pdp_id}?");
            urlBuilder_.Replace("{proj_id}", System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{env_id}", System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{pdp_id}", System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (users != null)
            {
                foreach (var item_ in users) { urlBuilder_.Append(System.Uri.EscapeDataString("users") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (approved != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("approved") + "=").Append(System.Uri.EscapeDataString(ConvertToString(approved, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resources != null)
            {
                foreach (var item_ in resources) { urlBuilder_.Append(System.Uri.EscapeDataString("resources") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (timestamp_from != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp_from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timestamp_to != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_to") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp_to, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_OPADecisionLog_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// OPA Decision Logs Ingress
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual object Insert_opa_decision_logs(System.Collections.Generic.IEnumerable<object> body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Insert_opa_decision_logsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// OPA Decision Logs Ingress
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Insert_opa_decision_logsAsync(System.Collections.Generic.IEnumerable<object> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/decision-logs/ingress");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Opal Data Sources
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual DataSourceConfig Get_opal_data_sources_opal_data_config_get()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_opal_data_sources_opal_data_config_getAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Opal Data Sources
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DataSourceConfig> Get_opal_data_sources_opal_data_config_getAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/opal/data/config");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataSourceConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PermitApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PermitApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIKeyInfo
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("org_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Org_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Project_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("env_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Env_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("access_level", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemberAccessLevel Access_level { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("object_type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemberAccessObj Object_type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("owner_type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public APIKeyOwnerType Owner_type { get; set; } = default!;

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum APIKeyOwnerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pdp_config")]
        Pdp_config = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIKeyRead
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.Always)]
        public string Secret { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class APIKeyScopeRead
    {
        /// <summary>
        /// Unique id of the organization that the api_key belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the api_key belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the api_key belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Environment_id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIKeyViewerContext
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public APIKeyViewerContextType Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("api_key", Required = Newtonsoft.Json.Required.Always)]
        public APIKeyInfo Api_key { get; set; } = new APIKeyInfo();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionBlockEditable
    {
        /// <summary>
        /// a more descriptive name for the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this action represents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionBlockRead
    {
        /// <summary>
        /// a more descriptive name for the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this action represents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Unique id of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// action key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddRolePermissions
    {
        /// <summary>
        /// List of permissions to assign to the role. If a permission is already granted to the role it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributeBlockEditable
    {
        /// <summary>
        /// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeType Type { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what data this attribute will store
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributeBlockRead
    {
        /// <summary>
        /// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeType Type { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what data this attribute will store
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Unique id of the attribute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// action key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; } = default!;

    }

    /// <summary>
    /// 
    /// <br/>    supported attribute primitives
    /// <br/>    
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AttributeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"bool")]
        Bool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"time")]
        Time = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionSetCreate
    {
        /// <summary>
        /// A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// the type of the set: UserSet or ResourceSet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionSetType? Type { get; set; } = PermitSDK.OpenAPI.ConditionSetType.Userset;

        /// <summary>
        /// whether the set was autogenerated by the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autogenerated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Autogenerated { get; set; } = false;

        /// <summary>
        /// For ResourceSets, the id of the base resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resource_id? Resource_id { get; set; } = default!;

        /// <summary>
        /// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// a boolean expression that consists of multiple conditions, with and/or logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Conditions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionSetRead
    {
        /// <summary>
        /// A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// the type of the set: UserSet or ResourceSet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionSetType? Type { get; set; } = PermitSDK.OpenAPI.ConditionSetType.Userset;

        /// <summary>
        /// whether the set was autogenerated by the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autogenerated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Autogenerated { get; set; } = false;

        /// <summary>
        /// For ResourceSets, the id of the base resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resource_id2? Resource_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the condition set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the condition set belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the condition set belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the condition set belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the condition set was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the condition set was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceRead? Resource { get; set; } = default!;

        /// <summary>
        /// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// a boolean expression that consists of multiple conditions, with and/or logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Conditions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionSetRuleCreate
    {
        /// <summary>
        /// The userset that will be given permission, i.e: all the users matching this rule will be given the specified permission
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_set", Required = Newtonsoft.Json.Required.Always)]
        public string User_set { get; set; } = default!;

        /// <summary>
        /// The permission that will be granted to the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Always)]
        public string Permission { get; set; } = default!;

        /// <summary>
        /// The resourceset that represents the resources that are granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_set", Required = Newtonsoft.Json.Required.Always)]
        public string Resource_set { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionSetRuleRead
    {
        /// <summary>
        /// Unique id of the condition set rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// A unique id by which Permit will identify this condition set rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// the userset that is currently granted permissions, i.e: all the users matching this rule are granted the permission on the resourceset
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_set", Required = Newtonsoft.Json.Required.Always)]
        public string User_set { get; set; } = default!;

        /// <summary>
        /// a permission that is currently granted to the userset *on* the resourceset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Always)]
        public string Permission { get; set; } = default!;

        /// <summary>
        /// the resourceset that represents the resources that are currently granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_set", Required = Newtonsoft.Json.Required.Always)]
        public string Resource_set { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the condition set rule belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the condition set rule belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the condition set rule belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the condition set rule was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the condition set rule was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionSetRuleRemove
    {
        /// <summary>
        /// The userset that will be unassigned these permission, i.e: all the users matching this rule will lose the specified permission
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_set", Required = Newtonsoft.Json.Required.Always)]
        public string User_set { get; set; } = default!;

        /// <summary>
        /// The permission that will be removed from the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Always)]
        public string Permission { get; set; } = default!;

        /// <summary>
        /// The resourceset that represents the resources that are no longer granted for access, i.e: all the resources matching this rule can no longer be accessed by the userset, and will be revoked the specified *permission*
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_set", Required = Newtonsoft.Json.Required.Always)]
        public string Resource_set { get; set; } = default!;

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConditionSetType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"userset")]
        Userset = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"resourceset")]
        Resourceset = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionSetUpdate
    {
        /// <summary>
        /// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// a boolean expression that consists of multiple conditions, with and/or logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Conditions { get; set; } = default!;

    }

    /// <summary>
    /// Static list of Data Source Entries returned to client.
    /// <br/>
    /// <br/>Answers this question for the client: from where should i get the
    /// <br/>full picture of data i need? (as opposed to incremental data
    /// <br/>updates)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataSourceConfig
    {
        /// <summary>
        /// list of data sources and how to fetch from them
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<DataSourceEntry> Entries { get; set; } = new System.Collections.ObjectModel.Collection<DataSourceEntry>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Data source configuration - where client's should retrive data from and how they should store it
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataSourceEntry
    {
        /// <summary>
        /// Url source to query for data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url { get; set; } = default!;

        /// <summary>
        /// Suggested fetcher configuration (e.g. auth or method) to fetch data with
        /// </summary>
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Config { get; set; } = default!;

        /// <summary>
        /// topics the data applies to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("topics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Topics { get; set; } = default!;

        /// <summary>
        /// OPA data api path to store the document at
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dst_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Dst_path { get; set; } = "";

        /// <summary>
        /// Method used to write into OPA - PUT/PATCH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("save_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Save_method { get; set; } = "PUT";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DevLogin
    {
        /// <summary>
        /// an email address from which to create a DEV MODE session
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        public string Username { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentCreate
    {
        /// <summary>
        /// A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentRead
    {
        /// <summary>
        /// A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the environment belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the environment belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the environment was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the environment was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        /// <summary>
        /// The name of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentUpdate
    {
        /// <summary>
        /// The name of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailedInvite
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        public string Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullData
    {
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, UserData> Users { get; set; } = new System.Collections.Generic.Dictionary<string, UserData>();

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, RoleData> Roles { get; set; } = new System.Collections.Generic.Dictionary<string, RoleData>();

        [Newtonsoft.Json.JsonProperty("condition_set_rules", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>> Condition_set_rules { get; set; } = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HTTPValidationError
    {
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidationError>? Detail { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityRead
    {
        /// <summary>
        /// Unique User Id of this identity in the identity provider (including the provider type)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public string User_id { get; set; } = default!;

        /// <summary>
        /// The identity provider type this identity came from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        public string Provider { get; set; } = default!;

        /// <summary>
        /// Unique User Id of this identity in the identity provider (NOT including the provider type)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.Always)]
        public string Sub { get; set; } = default!;

        /// <summary>
        /// Email connected to this account identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// Whether this email address connected to this account identity is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email_verified", Required = Newtonsoft.Json.Required.Always)]
        public bool Email_verified { get; set; } = default!;

        /// <summary>
        /// Raw user info json coming from our identity provider and matching a specific account identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auth0_info", Required = Newtonsoft.Json.Required.Always)]
        public object Auth0_info { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InviteAttemptResult
    {
        /// <summary>
        /// the invite code was accepted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invite_successful", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Invite_successful { get; set; } = false;

        /// <summary>
        /// if the invite failed, the reason it failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invite_failed_reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Invite_failed_reason { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InviteCreate
    {
        /// <summary>
        /// The invited member's email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// The role the member will be assigned with
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InviteRead
    {
        /// <summary>
        /// The invited member's email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// The role the member will be assigned with
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// Unique id of the invite
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the invite belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// The invite code that is sent to the member's email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invite_code", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Invite_code { get; set; } = default!;

        /// <summary>
        /// Date and time when the invite was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// The status of the invite (pending, failed, etc)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InviteStatus Status { get; set; } = default!;

        /// <summary>
        /// if failed, the reason the invitation failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failed_reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Failed_reason { get; set; } = default!;

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InviteStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"accepted")]
        Accepted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public string Version { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LanguageInstructions
    {
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        public ProgrammingLanguage Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        public string Label { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Always)]
        public string Instructions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginResult
    {
        /// <summary>
        /// whether login was successful
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logged_in", Required = Newtonsoft.Json.Required.Always)]
        public bool Logged_in { get; set; } = default!;

        /// <summary>
        /// when will the login session expire (the unix timestamp in seconds)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_at", Required = Newtonsoft.Json.Required.Always)]
        public int Expires_at { get; set; } = default!;

        /// <summary>
        /// the active organization on the session after the login
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_org_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Active_org_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("invite_attempt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InviteAttemptResult? Invite_attempt { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MemberAccessLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"read")]
        Read = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"write")]
        Write = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"admin")]
        Admin = 2,

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MemberAccessObj
    {

        [System.Runtime.Serialization.EnumMember(Value = @"org")]
        Org = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"env")]
        Env = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemberInfo
    {
        [Newtonsoft.Json.JsonProperty("member_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Member_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("login_expires", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Login_expires { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("given_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Given_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("family_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Family_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_superuser", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_superuser { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_onboarding", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_onboarding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        public object Settings { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemberViewerContext
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemberViewerContextType Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("member", Required = Newtonsoft.Json.Required.Always)]
        public MemberInfo Member { get; set; } = new MemberInfo();

        [Newtonsoft.Json.JsonProperty("session_id", Required = Newtonsoft.Json.Required.Always)]
        public string Session_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? User_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultiInviteResult
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<InviteRead> Success { get; set; } = new System.Collections.ObjectModel.Collection<InviteRead>();

        /// <summary>
        /// invites that were not even attempted, and the reason why
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FailedInvite>? Failed { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OPADecisionLog
    {
        [Newtonsoft.Json.JsonProperty("decision_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Decision_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        public Labels Labels { get; set; } = new Labels();

        [Newtonsoft.Json.JsonProperty("run_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Run_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Path { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Input { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Result { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OPALClient
    {
        [Newtonsoft.Json.JsonProperty("DATA_TOPICS", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> DATA_TOPICS { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("CLIENT_TOKEN", Required = Newtonsoft.Json.Required.Always)]
        public string CLIENT_TOKEN { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SERVER_URL", Required = Newtonsoft.Json.Required.Always)]
        public string SERVER_URL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SERVER_WS_URL", Required = Newtonsoft.Json.Required.Always)]
        public string SERVER_WS_URL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SERVER_PUBSUB_URL", Required = Newtonsoft.Json.Required.Always)]
        public string SERVER_PUBSUB_URL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DEFAULT_DATA_SOURCES_CONFIG_URL", Required = Newtonsoft.Json.Required.Always)]
        public string DEFAULT_DATA_SOURCES_CONFIG_URL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCOPE_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SCOPE_ID { get; set; } = default!;

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OnboardingStep
    {

        [System.Runtime.Serialization.EnumMember(Value = @"create_organization")]
        Create_organization = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"create_project")]
        Create_project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"create_resource")]
        Create_resource = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"create_actions")]
        Create_actions = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"assign_permissions")]
        Assign_permissions = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"assign_user_roles")]
        Assign_user_roles = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"connect_sdk")]
        Connect_sdk = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"done")]
        Done = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrgMemberRead
    {
        /// <summary>
        /// Unique id of the account member
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Email of the user controlling this account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email_verified", Required = Newtonsoft.Json.Required.Always)]
        public bool Email_verified { get; set; } = default!;

        /// <summary>
        /// Name of this user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// First name of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("given_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Given_name { get; set; } = default!;

        /// <summary>
        /// Last name of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("family_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Family_name { get; set; } = default!;

        /// <summary>
        /// URL to picture, photo, or avatar of the user that controls this account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("picture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Picture { get; set; } = default!;

        /// <summary>
        /// Whether or not this user has special access to permit.io organizations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_superuser", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_superuser { get; set; } = default!;

        /// <summary>
        /// Whether or not this user is currently onboarding, needs to be replaced by a user journey object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_onboarding", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_onboarding { get; set; } = default!;

        /// <summary>
        /// the step the user is currently going through in onboarding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onboarding_step", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OnboardingStep Onboarding_step { get; set; } = default!;

        /// <summary>
        /// Date and time when the account member was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Last date and time this user logged in (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Last_login { get; set; } = default!;

        /// <summary>
        /// Last IP address from which this user logged in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Last_ip { get; set; } = "0.0.0.0";

        /// <summary>
        /// Total number of logins this user has performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logins_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Logins_count { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("identities", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<IdentityRead> Identities { get; set; } = new System.Collections.ObjectModel.Collection<IdentityRead>();

        /// <summary>
        /// Custom permit.io dashboard settings, such as preferred theme, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        public object Settings { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrgMemberUpdate
    {
        /// <summary>
        /// Custom permit.io dashboard settings, such as preferred theme, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

        /// <summary>
        /// updates the onboarding step (optional)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onboarding_step", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OnboardingStep? Onboarding_step { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationCreate
    {
        /// <summary>
        /// A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the organization, usually it's your company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// the settings for this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationRead
    {
        /// <summary>
        /// A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Date and time when the organization was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the organization was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        /// <summary>
        /// The name of the organization, usually it's your company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// the settings for this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationUpdate
    {
        /// <summary>
        /// The name of the organization, usually it's your company's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// the settings for this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PDPConfigRead
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the pdp_config belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the pdp_config belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the pdp_config belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("client_secret", Required = Newtonsoft.Json.Required.Always)]
        public string Client_secret { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PDPContext
    {
        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Customer_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("client_id", Required = Newtonsoft.Json.Required.Always)]
        public string Client_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("backend_tier", Required = Newtonsoft.Json.Required.Always)]
        public System.Uri Backend_tier { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Component { get; set; } = "sidecar";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedResult_OPADecisionLog_
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<OPADecisionLog> Data { get; set; } = new System.Collections.ObjectModel.Collection<OPADecisionLog>();

        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Always)]
        public int Total_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("page_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_count { get; set; } = 0;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedResult_UserRead_
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<UserRead> Data { get; set; } = new System.Collections.ObjectModel.Collection<UserRead>();

        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Always)]
        public int Total_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("page_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_count { get; set; } = 0;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PdpValues
    {
        [Newtonsoft.Json.JsonProperty("BACKEND_SERVICE_URL", Required = Newtonsoft.Json.Required.Always)]
        public string BACKEND_SERVICE_URL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OPA_DECISION_LOG_INGRESS_ROUTE", Required = Newtonsoft.Json.Required.Always)]
        public string OPA_DECISION_LOG_INGRESS_ROUTE { get; set; } = default!;

    }

    /// <summary>
    /// An enumeration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProgrammingLanguage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"javascript")]
        Javascript = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"python")]
        Python = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dotnet")]
        Dotnet = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"java")]
        Java = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectCreate
    {
        /// <summary>
        /// A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// a longer description outlining the project objectives
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// the settings for this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectRead
    {
        /// <summary>
        /// A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the project belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the project was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the project was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        /// <summary>
        /// The name of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// a longer description outlining the project objectives
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// the settings for this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectUpdate
    {
        /// <summary>
        /// The name of the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// a longer description outlining the project objectives
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// the settings for this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Settings { get; set; } = default!;

    }

    /// <summary>
    /// A actions definition block, typically contained within a resource type definition block.
    /// <br/>The actions represents the ways you can interact with a protected resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationsBlock
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoteConfig
    {
        [Newtonsoft.Json.JsonProperty("opal_common", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Opal_common { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opal_client", Required = Newtonsoft.Json.Required.Always)]
        public OPALClient Opal_client { get; set; } = new OPALClient();

        [Newtonsoft.Json.JsonProperty("pdp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PdpValues? Pdp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Always)]
        public PDPContext Context { get; set; } = new PDPContext();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveRolePermissions
    {
        /// <summary>
        /// List of permissions to remove from the role. If a permission is not found it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`,i.e: the "permission name".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceActionCreate
    {
        /// <summary>
        /// A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this action respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceActionRead
    {
        /// <summary>
        /// The name of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this action respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// The name of the action, prefixed by the resource the action is acting upon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission_name", Required = Newtonsoft.Json.Required.Always)]
        public string Permission_name { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the action belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the action belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the action belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the resource that the action belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Resource_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the action was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the action was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceActionUpdate
    {
        /// <summary>
        /// The name of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this action respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceAttributeCreate
    {
        /// <summary>
        /// A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeType Type { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this attribute respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceAttributeRead
    {
        /// <summary>
        /// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeType Type { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this attribute respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the attribute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the resource that the attribute belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Resource_id { get; set; } = default!;

        /// <summary>
        /// A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_key", Required = Newtonsoft.Json.Required.Always)]
        public string Resource_key { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the attribute belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the attribute belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the attribute belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the attribute was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the attribute was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceAttributeUpdate
    {
        /// <summary>
        /// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeType? Type { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this attribute respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceCreate
    {
        /// <summary>
        /// A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Urn { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this resource respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// 
        /// <br/>        A actions definition block, typically contained within a resource type definition block.
        /// <br/>        The actions represents the ways you can interact with a protected resource.
        /// <br/>        
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, ActionBlockEditable> Actions { get; set; } = new System.Collections.Generic.Dictionary<string, ActionBlockEditable>();

        /// <summary>
        /// Attributes that each resource of this type defines, and can be used in your ABAC policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, AttributeBlockEditable>? Attributes { get; set; } = default!;

        /// <summary>
        /// Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RolesBlock? Roles { get; set; } = default!;

        /// <summary>
        /// Relations to other resources. The key is the relation name, and the value is the destination resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationsBlock? Relations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceInstanceCreate
    {
        /// <summary>
        /// A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tenant { get; set; } = default!;

        /// <summary>
        /// the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Always)]
        public string Resource { get; set; } = default!;

        /// <summary>
        /// Arbitraty resource attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceInstanceRead
    {
        /// <summary>
        /// A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tenant { get; set; } = default!;

        /// <summary>
        /// the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Always)]
        public string Resource { get; set; } = default!;

        /// <summary>
        /// Unique id of the resource instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the resource instance belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the resource instance belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the resource instance belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the resource instance was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the resource instance was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        /// <summary>
        /// the id of the resource (type) of this resource instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Resource_id { get; set; } = default!;

        /// <summary>
        /// the id of the tenant of this resource instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Tenant_id { get; set; } = default!;

        /// <summary>
        /// Arbitraty resource attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceInstanceUpdate
    {
        /// <summary>
        /// Arbitraty resource attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceRead
    {
        /// <summary>
        /// A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the resource belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the resource belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the resource belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the resource was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the resource was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Urn { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this resource respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// 
        /// <br/>        A actions definition block, typically contained within a resource type definition block.
        /// <br/>        The actions represents the ways you can interact with a protected resource.
        /// <br/>        
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ActionBlockRead>? Actions { get; set; } = default!;

        /// <summary>
        /// Attributes that each resource of this type defines, and can be used in your ABAC policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, AttributeBlockRead>? Attributes { get; set; } = default!;

        /// <summary>
        /// Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RolesBlock? Roles { get; set; } = default!;

        /// <summary>
        /// Relations to other resources. The key is the relation name, and the value is the destination resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationsBlock? Relations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceReplace
    {
        /// <summary>
        /// The name of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Urn { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this resource respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// 
        /// <br/>        A actions definition block, typically contained within a resource type definition block.
        /// <br/>        The actions represents the ways you can interact with a protected resource.
        /// <br/>        
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.IDictionary<string, ActionBlockEditable> Actions { get; set; } = new System.Collections.Generic.Dictionary<string, ActionBlockEditable>();

        /// <summary>
        /// Attributes that each resource of this type defines, and can be used in your ABAC policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, AttributeBlockEditable>? Attributes { get; set; } = default!;

        /// <summary>
        /// Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RolesBlock? Roles { get; set; } = default!;

        /// <summary>
        /// Relations to other resources. The key is the relation name, and the value is the destination resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationsBlock? Relations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceRoleCreate
    {
        /// <summary>
        /// A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceRoleRead
    {
        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

        /// <summary>
        /// A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the resource that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Resource_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the role was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the role was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceRoleUpdate
    {
        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceUpdate
    {
        /// <summary>
        /// The name of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Urn { get; set; } = default!;

        /// <summary>
        /// An optional longer description of what this resource respresents in your system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// 
        /// <br/>        A actions definition block, typically contained within a resource type definition block.
        /// <br/>        The actions represents the ways you can interact with a protected resource.
        /// <br/>        
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ActionBlockEditable>? Actions { get; set; } = default!;

        /// <summary>
        /// Attributes that each resource of this type defines, and can be used in your ABAC policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, AttributeBlockEditable>? Attributes { get; set; } = default!;

        /// <summary>
        /// Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RolesBlock? Roles { get; set; } = default!;

        /// <summary>
        /// Relations to other resources. The key is the relation name, and the value is the destination resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationsBlock? Relations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleAssignmentCreate
    {
        /// <summary>
        /// the role that will be assigned (accepts either the role id or the role key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// the tenant the role is associated with (accepts either the tenant id or the tenant key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Always)]
        public string Tenant { get; set; } = default!;

        /// <summary>
        /// the user the role will be assigned to (accepts either the user id or the user key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        public string User { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleAssignmentRead
    {
        /// <summary>
        /// Unique id of the role assignment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// the user the role is assigned to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        public string User { get; set; } = default!;

        /// <summary>
        /// the role that is assigned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// the tenant the role is associated with
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Always)]
        public string Tenant { get; set; } = default!;

        /// <summary>
        /// Unique id of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid User_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Role_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Tenant_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the role assignment belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the role assignment belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the role assignment belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the role assignment was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleAssignmentRemove
    {
        /// <summary>
        /// the role that will be unassigned (accepts either the role id or the role key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// the tenant the role is associated with (accepts either the tenant id or the tenant key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Always)]
        public string Tenant { get; set; } = default!;

        /// <summary>
        /// the user the role will be unassigned from (accepts either the user id or the user key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        public string User { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleBlock
    {
        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleCreate
    {
        /// <summary>
        /// A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleData
    {
        [Newtonsoft.Json.JsonProperty("grants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Grants { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleRead
    {
        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

        /// <summary>
        /// A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the role belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the role was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the role was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleUpdate
    {
        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// optional description string explaining what this role represents, or what permissions are granted to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// list of action keys that define what actions this resource role is permitted to do
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        /// <summary>
        /// list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Extends { get; set; } = default!;

    }

    /// <summary>
    /// Resource roles definition block, defines all the roles on the resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RolesBlock
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantCreate
    {
        /// <summary>
        /// A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// A descriptive name for the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantRead
    {
        /// <summary>
        /// A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the tenant belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the tenant belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the tenant belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        /// <summary>
        /// Date and time when the tenant was created (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Created_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the tenant was last updated/modified (ISO_8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Updated_at { get; set; } = default!;

        /// <summary>
        /// Date and time when the tenant was last active (ISO_8601 format). In other words, this is the last time a permission check was done on a resource belonging to this tenant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_action_at", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Last_action_at { get; set; } = default!;

        /// <summary>
        /// A descriptive name for the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantUpdate
    {
        /// <summary>
        /// A descriptive name for the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// an optional longer description of the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserCreate
    {
        /// <summary>
        /// A unique id by which Permit will identify the user for permission checks. You will later pass this ID to the `permit.check()` API. You can use anything for this ID, the user email, a UUID or anything else as long as it's unique on your end. The user key must be url-friendly (slugified).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// The email of the user. If synced, will be unique inside the environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// First name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? First_name { get; set; } = default!;

        /// <summary>
        /// Last name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Last_name { get; set; } = default!;

        /// <summary>
        /// Arbitraty user attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserData
    {
        [Newtonsoft.Json.JsonProperty("roleAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? RoleAssignments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRead
    {
        /// <summary>
        /// A unique id by which Permit will identify the user for permission checks. You will later pass this ID to the `permit.check()` API. You can use anything for this ID, the user email, a UUID or anything else as long as it's unique on your end. The user key must be url-friendly (slugified).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Unique id of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Unique id of the organization that the user belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Organization_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the project that the user belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Project_id { get; set; } = default!;

        /// <summary>
        /// Unique id of the environment that the user belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("environment_id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Environment_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRole>? Roles { get; set; } = default!;

        /// <summary>
        /// The email of the user. If synced, will be unique inside the environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// First name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? First_name { get; set; } = default!;

        /// <summary>
        /// Last name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Last_name { get; set; } = default!;

        /// <summary>
        /// Arbitraty user attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRole
    {
        /// <summary>
        /// the role that is assigned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// the tenant the role is associated with
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Always)]
        public string Tenant { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleCreate
    {
        /// <summary>
        /// the role that will be assigned (accepts either the role id or the role key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// the tenant the role is associated with (accepts either the tenant id or the tenant key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Always)]
        public string Tenant { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleRemove
    {
        /// <summary>
        /// the role that will be unassigned (accepts either the role id or the role key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        public string Role { get; set; } = default!;

        /// <summary>
        /// the tenant the role is associated with (accepts either the tenant id or the tenant key)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Always)]
        public string Tenant { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserUpdate
    {
        /// <summary>
        /// The email of the user. If synced, will be unique inside the environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// First name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? First_name { get; set; } = default!;

        /// <summary>
        /// Last name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Last_name { get; set; } = default!;

        /// <summary>
        /// Arbitraty user attributes that will be used to enforce attribute-based access control policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Attributes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationError
    {
        [Newtonsoft.Json.JsonProperty("loc", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<Loc> Loc { get; set; } = new System.Collections.ObjectModel.Collection<Loc>();

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Always)]
        public string Msg { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A Viewer Context object represents the currently logged in actor.
    /// <br/>
    /// <br/>- It can be a human user of permit.io
    /// <br/>- It can be a machine (using an api key) that directly interacts with the api
    /// <br/>- It can be an (embedded) human user of one of our customers, using an embedded UI interface.
    /// <br/>
    /// <br/>A VC object should contain *all* the data required by the internal
    /// <br/>authz layer to verify whether an api request is allowed to run.
    /// <br/>
    /// <br/>This model allows us to avoid expensive SQL queries for internal AuthZ logic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViewerContext
    {
        [Newtonsoft.Json.JsonProperty("viewer", Required = Newtonsoft.Json.Required.Always)]
        public MemberViewerContext Viewer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("grants", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.ICollection<ViewerGrant> Grants { get; set; } = new System.Collections.ObjectModel.Collection<ViewerGrant>();

        /// <summary>
        /// the active organization id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_org_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Active_org_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViewerGrant
    {
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemberAccessLevel Role { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemberAccessObj Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("org_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Org_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Project_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("env_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Env_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum APIKeyViewerContextType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"api_key")]
        Api_key = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resource_id
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resource_id2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MemberViewerContextType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loc
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PermitApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitApiException<TResult> : PermitApiException
    {
        public TResult Result { get; private set; }

        public PermitApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603